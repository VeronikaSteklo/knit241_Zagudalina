package org.knit.Solutions.Task10;

import java.util.concurrent.*;

/*
üìå –û–ø–∏—Å–∞–Ω–∏–µ
–ì—Ä—É–ø–ø–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–±–µ–≥–µ. –û–¥–Ω–∞–∫–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–æ–Ω–∫–∏ –≤—Å–µ –¥–æ–ª–∂–Ω—ã —Å–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –∑–∞–±–µ–≥ –Ω–∞—á–Ω—ë—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CyclicBarrier, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏.

–ö–∞–∂–¥—ã–π –±–µ–≥—É–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∑–∞—Ç–µ–º –±–µ–∂–∏—Ç —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è (—Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è Thread.sleep), –ø–æ—Å–ª–µ —á–µ–≥–æ —Ñ–∏–Ω–∏—à–∏—Ä—É–µ—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –±–µ–≥—É–Ω—ã –∑–∞–≤–µ—Ä—à–∞—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏.

üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ:
–°–æ–∑–¥–∞—Ç—å CyclicBarrier –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–±–µ–≥–∞.
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Runner, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ª–æ–≥–∏–∫—É –≤ –ø–æ—Ç–æ–∫–µ:
–û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ barrier.await()).
–°–∏–º—É–ª—è—Ü–∏—è –±–µ–≥–∞ (Thread.sleep(randomTime)).
–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–∏–Ω–∏—à–µ.
–ü–æ—Å–ª–µ —Ñ–∏–Ω–∏—à–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≥–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–≥—É–Ω–æ–≤ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π.
üîß –ü–æ–¥—Å–∫–∞–∑–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Executors.newFixedThreadPool() –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏.
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ThreadLocalRandom.current().nextInt(500, 3000).
üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):

–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É CyclicBarrier, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Å–µ—Ö –±–µ–≥—É–Ω–æ–≤ –Ω–∞ —Ñ–∏–Ω–∏—à–µ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≥–æ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –±–µ–≥—É–Ω–æ–≤ "—Ç—Ä–∞–≤–º–∏—Ä—É–µ—Ç—Å—è" –∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å).
 */

import org.knit.Solutions.TasksDescripton;

@TasksDescripton(number = 10, name = "–ó–∞–¥–∞—á–∞ 10: –ì–æ–Ω–∫–∞ –±–µ–≥—É–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CyclicBarrier")

public class RunnerRace {
    public static void main(String[] args) {
        final int NUM_RUNNERS = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–≥—É–Ω–æ–≤
        CyclicBarrier startBarrier = new CyclicBarrier(NUM_RUNNERS, () ->
                System.out.println("–í—Å–µ –±–µ–≥—É–Ω—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ! –ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n")
        );

        CyclicBarrier finishBarrier = new CyclicBarrier(NUM_RUNNERS, () -> {
            if (Runner.raceOngoing.get()) {
                System.out.println("–ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤—à–∏–µ –±–µ–≥—É–Ω—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ñ–∏–Ω–∏—à–∞.\n");
            } else {
                System.out.println("–ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –∏–∑-–∑–∞ —Ç—Ä–∞–≤–º—ã –æ–¥–Ω–æ–≥–æ –∏–∑ –±–µ–≥—É–Ω–æ–≤!\n");
            }
            System.exit(0);
        });

        ExecutorService executor = Executors.newFixedThreadPool(NUM_RUNNERS);

        for (int i = 1; i <= NUM_RUNNERS; i++) {
            executor.execute(new Runner(i, startBarrier, finishBarrier));
        }

        executor.shutdown();
    }
}

